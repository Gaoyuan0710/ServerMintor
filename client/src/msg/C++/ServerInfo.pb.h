// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerInfo.proto

#ifndef PROTOBUF_ServerInfo_2eproto__INCLUDED
#define PROTOBUF_ServerInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ServerInfo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ServerInfo_2eproto();
void protobuf_AssignDesc_ServerInfo_2eproto();
void protobuf_ShutdownFile_ServerInfo_2eproto();

class InfoPackage;

// ===================================================================

class InfoPackage : public ::google::protobuf::Message {
 public:
  InfoPackage();
  virtual ~InfoPackage();

  InfoPackage(const InfoPackage& from);

  inline InfoPackage& operator=(const InfoPackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoPackage& default_instance();

  void Swap(InfoPackage* other);

  // implements Message ----------------------------------------------

  InfoPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfoPackage& from);
  void MergeFrom(const InfoPackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 infoTypes = 1;
  inline bool has_infotypes() const;
  inline void clear_infotypes();
  static const int kInfoTypesFieldNumber = 1;
  inline ::google::protobuf::int32 infotypes() const;
  inline void set_infotypes(::google::protobuf::int32 value);

  // required int32 infoLen = 2;
  inline bool has_infolen() const;
  inline void clear_infolen();
  static const int kInfoLenFieldNumber = 2;
  inline ::google::protobuf::int32 infolen() const;
  inline void set_infolen(::google::protobuf::int32 value);

  // required string infoData = 3;
  inline bool has_infodata() const;
  inline void clear_infodata();
  static const int kInfoDataFieldNumber = 3;
  inline const ::std::string& infodata() const;
  inline void set_infodata(const ::std::string& value);
  inline void set_infodata(const char* value);
  inline void set_infodata(const char* value, size_t size);
  inline ::std::string* mutable_infodata();
  inline ::std::string* release_infodata();
  inline void set_allocated_infodata(::std::string* infodata);

  // @@protoc_insertion_point(class_scope:ServerInfo.InfoPackage)
 private:
  inline void set_has_infotypes();
  inline void clear_has_infotypes();
  inline void set_has_infolen();
  inline void clear_has_infolen();
  inline void set_has_infodata();
  inline void clear_has_infodata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 infotypes_;
  ::google::protobuf::int32 infolen_;
  ::std::string* infodata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ServerInfo_2eproto();
  friend void protobuf_AssignDesc_ServerInfo_2eproto();
  friend void protobuf_ShutdownFile_ServerInfo_2eproto();

  void InitAsDefaultInstance();
  static InfoPackage* default_instance_;
};
// ===================================================================


// ===================================================================

// InfoPackage

// required int32 infoTypes = 1;
inline bool InfoPackage::has_infotypes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfoPackage::set_has_infotypes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfoPackage::clear_has_infotypes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfoPackage::clear_infotypes() {
  infotypes_ = 0;
  clear_has_infotypes();
}
inline ::google::protobuf::int32 InfoPackage::infotypes() const {
  return infotypes_;
}
inline void InfoPackage::set_infotypes(::google::protobuf::int32 value) {
  set_has_infotypes();
  infotypes_ = value;
}

// required int32 infoLen = 2;
inline bool InfoPackage::has_infolen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InfoPackage::set_has_infolen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InfoPackage::clear_has_infolen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InfoPackage::clear_infolen() {
  infolen_ = 0;
  clear_has_infolen();
}
inline ::google::protobuf::int32 InfoPackage::infolen() const {
  return infolen_;
}
inline void InfoPackage::set_infolen(::google::protobuf::int32 value) {
  set_has_infolen();
  infolen_ = value;
}

// required string infoData = 3;
inline bool InfoPackage::has_infodata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InfoPackage::set_has_infodata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InfoPackage::clear_has_infodata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InfoPackage::clear_infodata() {
  if (infodata_ != &::google::protobuf::internal::kEmptyString) {
    infodata_->clear();
  }
  clear_has_infodata();
}
inline const ::std::string& InfoPackage::infodata() const {
  return *infodata_;
}
inline void InfoPackage::set_infodata(const ::std::string& value) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::kEmptyString) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(value);
}
inline void InfoPackage::set_infodata(const char* value) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::kEmptyString) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(value);
}
inline void InfoPackage::set_infodata(const char* value, size_t size) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::kEmptyString) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InfoPackage::mutable_infodata() {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::kEmptyString) {
    infodata_ = new ::std::string;
  }
  return infodata_;
}
inline ::std::string* InfoPackage::release_infodata() {
  clear_has_infodata();
  if (infodata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = infodata_;
    infodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InfoPackage::set_allocated_infodata(::std::string* infodata) {
  if (infodata_ != &::google::protobuf::internal::kEmptyString) {
    delete infodata_;
  }
  if (infodata) {
    set_has_infodata();
    infodata_ = infodata;
  } else {
    clear_has_infodata();
    infodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerInfo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerInfo_2eproto__INCLUDED
